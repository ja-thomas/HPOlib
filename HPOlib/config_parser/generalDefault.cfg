[HPOLIB]
console_output_delay = 1.0
#Will be used for wrapping.py and SMAC
dispatcher = runsolver_wrapper.py

python_module =
python_function =
python_test_function =

use_HPOlib_time_measurement = True
runtime_on_terminate = -1.0
number_cv_folds = 1
max_crash_per_cv = 3
remove_target_algorithm_output = True
number_of_concurrent_jobs = 1

store_target_algorithm_calls = False
# loglevel: https://docs.python.org/2/library/logging.html#logging-levels
# A lower number results in more verbose output
HPOlib_loglevel = 20
optimizer_loglevel = 30
logging_host =

function_setup =
function_teardown =

experiment_directory_prefix =
temporary_output_directory =

#The mem-limit must be expressed in mega-bytes
#The cpu-limit must be expressed in seconds (CPU time)
#The time-limit must be expressed in seconds (wall clock time)
runsolver_time_limit =
total_time_limit =
memory_limit =
cpu_limit =

# E.g. Information for Theano and cuda
leading_runsolver_info =

# This field is deprecated and no longer used
# leading_algo_info =

# If an algorithm can handle cv on it's own
# and calls runsolver_wrapper instead of cv.py as a function
handles_cv=0

# Test/validation function
test_function =

# Dummy options, which need to be filled out later
number_of_jobs =
function =
result_on_terminate =

[MYSQLDBTAE]
pool = example
database =
rc_cutoff = 3600
